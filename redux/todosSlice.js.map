{"version":3,"file":"todosSlice.js","sourceRoot":"","sources":["../src/redux/todosSlice.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAE/C,MAAM,iBAAiB,GAAG;IACtB,QAAQ,EAAE,UAAU;IACpB,cAAc,EAAE,gBAAgB;IAChC,WAAW,EAAE,aAAa;CAC7B,CAAC;AACF,MAAM,YAAY,GAAG;IACjB,KAAK,EAAE,EAAiD;IACxD,MAAM,EAAE,iBAAiB,CAAC,QAAQ;CACrC,CAAA;AACD,MAAM,SAAS,GAAG,WAAW,CAAC;IAC1B,IAAI,EAAE,OAAO;IACb,YAAY;IACZ,QAAQ,EAAE;QACN,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;YACvB,OAAO,CAAC,GAAG,CAAC,EAAC,MAAM,EAAE,MAAM,CAAC,OAAO,EAAC,CAAC,CAAC;YACtC,KAAK,CAAC,KAAK,GAAG,CAAC,GAAG,KAAK,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,CAAC,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;QAC/E,CAAC;QACD,gBAAgB,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;YAChC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACjC,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;oBACpC,OAAO,EAAE,GAAG,IAAI,EAAE,SAAS,EAAE,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;gBAC5D,CAAC;gBACD,OAAO,IAAI,CAAC;YAChB,CAAC,CAAC,CAAC;QACP,CAAC;QACD,cAAc,EAAE,CAAC,KAAK,EAAE,EAAE;YACtB,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC9D,CAAC;QACD,YAAY,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;YAC5B,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC;QAClC,CAAC;KACJ;CACJ,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,cAAc,EAAE,YAAY,EAAE,GAAG,SAAS,CAAC,OAAO,CAAC;AAC7F,eAAe,SAAS,CAAC,OAAO,CAAC","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst visibilityFilters = {\n    SHOW_ALL: 'SHOW_ALL',\n    SHOW_COMPLETED: 'SHOW_COMPLETED',\n    SHOW_ACTIVE: 'SHOW_ACTIVE'\n};\nconst initialState = {\n    todos: [] as Array<{ task: string, completed: boolean }>,\n    filter: visibilityFilters.SHOW_ALL,\n}\nconst todoSlice = createSlice({\n    name: \"todos\",\n    initialState,\n    reducers: {\n        addTodo: (state, action) => {\n            console.log({action: action.payload});\n            state.todos = [...state.todos, { task: action.payload, completed: false }];\n        },\n        updateTaskStatus: (state, action) => {\n            state.todos = state.todos.map(todo => {\n                if (todo.task === action.payload.task) {\n                    return { ...todo, completed: action.payload.completed };\n                }\n                return todo;\n            });\n        },\n        clearCompleted: (state) => {\n            state.todos = state.todos.filter(todo => !todo.completed);\n        },\n        filterChange: (state, action) => {\n            state.filter = action.payload;\n        },\n    }\n});\n\nexport const { addTodo, updateTaskStatus, clearCompleted, filterChange } = todoSlice.actions;\nexport default todoSlice.reducer;\n"]}